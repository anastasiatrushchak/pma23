class Shape:
    def __init__(self, color):
        self.color = color

    def draw(self):
        pass

    def perim(self):
        pass

    def area(self):
        pass


class Square(Shape):
    def draw(self):
        return f"This square is {self.color.fill()}"

    def perim(self, side):
        if side <= 0:
            raise ValueError("Side length must be a positive number")
        return side *4

    def area(self, side):
        if side <= 0:
            raise ValueError("Side length must be a positive number")
        return side ** 2


class Rectangle(Shape):
    def draw(self):
        return f"This rectangle is {self.color.fill()}"

    def perim(self, side_a, side_b):
        if side_a | side_b <= 0:
            raise ValueError("Side length must be a positive number")
        return (side_a + side_b) * 2

    def area(self, side_a, side_b):
        if side_a | side_b <= 0:
            raise ValueError("Side length must be a positive number")
        return side_a*side_b


class Circle(Shape):
    def draw(self):
        return f"This circle is {self.color.fill()}"

    def perim(self, radius):
        if radius <= 0:
            raise ValueError("Radius must be a positive number")
        return 3.14 * radius * 2

    def area(self, radius):
        if radius <= 0:
            raise ValueError("Radius must be a positive number")
        return 3.14 * (radius ** 2)


class Color:
    def fill(self):
        pass


class Blue(Color):
    def fill(self):
        return "blue"


class Red(Color):
    def fill(self):
        return "red"



blue_color = Blue()
red_color = Red()

square = Square(blue_color)
circle = Circle(red_color)

print(square.draw())
print(square.area(4))

print(circle.draw())
print(circle.area(3))

# Error cases
try:
    square.area(-2)
except ValueError as e:
    print(f"Error: {e}")

try:
    circle.area(0)
except ValueError as e:
    print(f"Error: {e}")

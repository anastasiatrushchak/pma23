try:
    f = open('matrix.txt')
except FileNotFoundError:
    print('Input file does not exist')

try:
    f = open('output.txt')
except FileNotFoundError:
    print('Output file does not exist')

with open('matrix.txt', 'r') as input_file:
    try:
        if input_file.stat('example.txt').st_size == 0:
            print('The file is empty')
    except:
            print('The file is not empty')
    a = []
    b = []
    current = a
    for line in input_file.readlines():
        if ',' not in line:
            current = b
        else:
            current.append([])
            for x in line.split(','):
                current[len(current) - 1].append(int(x))



with open('output.txt', 'a') as of:
    def add(m, n):
        result = [[m[i][j] + n[i][j] for j in range(len(m[0]))] for i in range(len(m))]
        of.write('add:' + '\n')
        for i in range(len(result)):
            of.write(str(result[i]) + '\n')


    def subtract(m, n):
        result = [[m[i][j] - n[i][j] for j in range(len(m[0]))] for i in range(len(m))]
        of.write('subtract:' + '\n')
        for r in range(len(result)):
            of.write(str(result[r]) + '\n')


    def multiply(m, n):
        result = [[0 for _ in range(len(n[0]))] for _ in range(len(m))]
        for i in range(len(m)):
            for j in range(len(n[0])):
                for k in range(len(n)):
                    result[i][j] += m[i][k] * n[k][j]
        of.write('multiply:' + '\n')
        for r in range(len(result)):
            of.write(str(result[r]) + '\n')


    def det_two(m):
        return m[0][0] * m[1][1] - m[0][1] * m[1][0]


    def det_three(n):
        ret = 0
        for i in range(3):
            pos = 1
            neg = 1
            for j in range(3):
                pos *= n[j][(i + j) % 3]
                neg *= n[j][(i - j) % 3]
            ret += (pos - neg)

        return ret


    def inv_three(m2):
        ret = [3 * [None] for _i in range(3)]
        det = det_three(m2)
        for i in range(3):
            for j in range(3):
                adj = [[n for ii, n in enumerate(row) if ii != i] for jj, row in enumerate(m2) if jj != j]
                d = det_two(adj)
                sgn = (-1) ** (i + j)
                ret[i][j] = sgn * d / det
        return ret


    def divide(m, n):
        result = [[0 for _ in range(len(b[0]))] for _ in range(len(a))]
        temp = inv_three(n)
        for i in range(len(m)):
            for j in range(len(temp[0])):
                for k in range(len(temp)):
                    result[i][j] += m[i][k] * temp[k][j]
        of.write('divide:' + '\n')
        for r in range(len(result)):
            of.write(str(result[r]) + '\n')


    add(a, b)
    subtract(a, b)
    multiply(a, b)
    divide(a, b)

try:
    f = open('matrix.txt')
except FileNotFoundError:
    print('Input file does not exist')

try:
    f = open('output.txt')
except FileNotFoundError:
    print('Output file does not exist')
def det2(A):
    return A[0][0] * A[1][1] - A[0][1] * A[1][0]

def det3(B):
        ret = 0
        for i in range(3):
            pos = 1
            neg = 1
            for j in range(3):
                pos *= B[j][(i + j) % 3]
                neg *= B[j][(i - j) % 3]
            ret += (pos - neg)

        return ret

def inv3(B):
        ret = [3 * [None] for _i in range(3)]
        det = det3(B)
        for i in range(3):
            for j in range(3):
                adj = [[n for ii, n in enumerate(row) if ii != i]
                       for jj, row in enumerate(B) if jj != j]
                d = det2(adj)
                sgn = (-1) ** (i + j)
                ret[i][j] = sgn * d / det
        return ret
class Matrix:

    def get_matrix(self, n, m):
        num = 1
        matrix = [[None for j in range(m)] for i in range(n)]
        for i in range(len(matrix)):
            for j in range(len(matrix[i])):
                matrix[i][j] = num
                num += 1
        return matrix

    def __init__(self, n, m):
        self.matrix = self.get_matrix(n, m)
    def get_readable_matrix_string(self, matrix):
        strings = []
        for row in matrix:
            strings.append(str(row))
        return '\n'.join(strings)

    def str(self):
        return self.get_readable_matrix_string(self.matrix)

    def setElement(self, i, j, element):
        self.matrix[i - 1][j - 1] = element

    def __add__(self, other):
        if isinstance(other, Matrix):
            result = [[0 for j in range(len(self.matrix[0]))] for i in range(len(self.matrix))]
            for i in range(len(self.matrix)):
                for j in range(len(self.matrix[0])):
                    result[i][j] = self.matrix[i][j] + other.matrix[i][j]
            return self.get_readable_matrix_string(result)
        return self.get_readable_matrix_string([[num + other for num in row] for row in self.matrix])

    def __sub__(self, other):
        if isinstance(other, Matrix):
            result = [[0 for j in range(len(self.matrix[0]))] for i in range(len(self.matrix))]
            for i in range(len(self.matrix)):
                for j in range(len(self.matrix[0])):
                    result[i][j] = self.matrix[i][j] - other.matrix[i][j]
            return self.get_readable_matrix_string(result)
        return self.get_readable_matrix_string([[num - other for num in row] for row in self.matrix])

    def __mul__(self, other):
        if isinstance(other, Matrix):
            result = [[0 for j in range(len(other.matrix[0]))] for i in range(len(self.matrix))]
            for i in range(len(self.matrix)):
                for j in range(len(other.matrix[0])):
                    for k in range(len(other.matrix)):
                            result[i][j] += self.matrix[i][k] * other.matrix[k][j]
            return self.get_readable_matrix_string(result)
        return self.get_readable_matrix_string([[num * other for num in row] for row in self.matrix])

    def __truediv__(self, other):
      try:
        if isinstance(other, Matrix):
                determinant = det3(other.matrix)
                result = [[0 for _ in range(len(other.matrix[0]))] for _ in range(len(self.matrix))]
                m3 = inv3(other.matrix)
                for i in range(len(self.matrix)):
                    for j in range(len(m3[0])):
                        for k in range(len(m3)):
                            result[i][j] += self.matrix[i][k] * m3[k][j]
                return self.get_readable_matrix_string(result)
        return self.get_readable_matrix_string([[num * other for num in row] for row in self.matrix])
      except ZeroDivisionError as e:
        print(e)
        return (str(e))
input_file = open('matrix.txt', 'r')
try:
    if input_file.stat('matrix.txt').st_size == 0:
        print('The file is empty')
except:
    print('The file is not empty')

a = []
b = []
current = a
for line in input_file.readlines():
    if ',' not in line:
        current = b
    else:
        current.append([])
        for x in line.split(','):
            current[len(current) - 1].append(int(x))

m1= Matrix(3,3)
for i in range(len(a)):
    for j in range(3):
        m1.setElement(i + 1, j + 1, a[i][j])

m2= Matrix(3,3)
for i in range(len(b)):
    for j in range(3):
        m2.setElement(i + 1, j + 1, b[i][j])
with open ('output.txt','w') as file_output:
    file_output.write(m1+m2 +'\n')
    file_output.write(m1-m2 +'\n')
    file_output.write(m1*m2+'\n')
    file_output.write(m1/m2)
